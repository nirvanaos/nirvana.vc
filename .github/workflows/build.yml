name: Build and test

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events
  push:
    branches: [ develop, feature/** ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

  # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@main
        with:
          submodules: recursive

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@main
        with:
          msbuild-architecture: x64

      - name: Setup NuGet
        uses: nuget/setup-nuget@main
  
      - name: Restore NuGet packages
        run: nuget restore Nirvana.sln
        
      - name: Restore vcpkg packages
        run: vcpkg integrate install
        
      - name: x64 Debug build
        run: ./Build.ps1 "x64" "Debug 2022"
        shell: pwsh

      - name: x64 Debug test libraries
        run: ./TestLibs.ps1 "x64" "Debug 2022"
        shell: pwsh

      - name: Win32 Debug build
        run: ./Build.ps1 "Win32" "Debug 2022"
        shell: pwsh

      - name: Win32 Debug test libraries
        run: ./TestLibs.ps1 "Win32" "Debug 2022"
        shell: pwsh

      - name: x64 Debug test
        run: ./Test.ps1 "x64" "Debug 2022"
        shell: pwsh

      - name: Win32 Debug test
        run: ./Test.ps1 "Win32" "Debug 2022"
        shell: pwsh

      - name: x64 Debug clean
        run: ./Clean.ps1 "x64" "Debug 2022"
        shell: pwsh

      - name: Win32 Debug clean
        run: ./Clean.ps1 "Win32" "Debug 2022"
        shell: pwsh

      - name: x64 Release build
        run: ./Build.ps1 "x64" "Release 2022"
        shell: pwsh

      - name: x64 Release test libraries
        run: ./TestLibs.ps1 "x64" "Release 2022"
        shell: pwsh

      - name: Win32 Release build
        run: ./Build.ps1 "Win32" "Release 2022"
        shell: pwsh

      - name: Win32 Release test libraries
        run: ./TestLibs.ps1 "Win32" "Release 2022"
        shell: pwsh

      - name: x64 Release test
        run: ./Test.ps1 "x64" "Release 2022"
        shell: pwsh

      - name: Win32 Release test
        run: ./Test.ps1 "Win32" "Release 2022"
        shell: pwsh

      - name: x64 Release clean
        run: ./Clean.ps1 "x64" "Release 2022"
        shell: pwsh

      - name: Win32 Release clean
        run: ./Clean.ps1 "Win32" "Release 2022"
        shell: pwsh

#      - name: x64 Debug LLVM build
#        run: ./Build.ps1 "x64" "Debug LLVM"
#        shell: pwsh

#      - name: x64 Debug LLVM test libraries
#        run: ./TestLibs.ps1 "x64" "Debug LLVM"
#        shell: pwsh

#      - name: x64 Debug LLVM test
#        run: ./Test.ps1 "x64" "Debug LLVM"
#        shell: pwsh

#      - name: x64 Debug LLVM clean
#        run: ./Clean.ps1 "x64" "Debug LLVM"
#        shell: pwsh

#      - name: x64 Release LLVM build
#        run: ./Build.ps1 "x64" "Release LLVM"
#        shell: pwsh

#      - name: x64 Release LLVM test libraries
#        run: ./TestLibs.ps1 "x64" "Release LLVM"
#        shell: pwsh

#      - name: x64 Release LLVM test
#        run: ./Test.ps1 "x64" "Release LLVM"
#        shell: pwsh

#      - name: x64 Release LLVM clean
#        run: ./Clean.ps1 "x64" "Release LLVM"
#        shell: pwsh

#      - name: Win32 Debug LLVM build
#        run: ./Build.ps1 "Win32" "Debug LLVM"
#        shell: pwsh

#      - name: Win32 Debug LLVM test libraries
#        run: ./TestLibs.ps1 "Win32" "Debug LLVM"
#        shell: pwsh

#      - name: Win32 Debug LLVM test
#        run: ./Test.ps1 "Win32" "Debug LLVM"
#        shell: pwsh

#      - name: Win32 Debug LLVM clean
#        run: ./Clean.ps1 "Win32" "Debug LLVM"
#        shell: pwsh

#      - name: Win32 Release LLVM build
#        run: ./Build.ps1 "Win32" "Release LLVM"
#        shell: pwsh

#      - name: Win32 Release LLVM test libraries
#        run: ./TestLibs.ps1 "Win32" "Release LLVM"
#        shell: pwsh

#      - name: Win32 Release LLVM test
#        run: ./Test.ps1 "Win32" "Release LLVM"
#        shell: pwsh

#      - name: Win32 Release LLVM clean
#        run: ./Clean.ps1 "Win32" "Release LLVM"
#        shell: pwsh

      - name: Upload Logs
        if: ${{ always() }}
        uses: actions/upload-artifact@main
        with:
          name: logs
          path: "C:/ProgramData/Nirvana/Nirvana/var/log"

      - name: List Tests
        run: dir test-results
        shell: cmd

      - name: Setup Python
        uses: actions/setup-python@main
        with:
            python-version: 3.8

      - name: Test Results
        uses: EnricoMi/publish-unit-test-result-action/windows@v2
        id: test-results
        if: always()
        with:
            files: "test-results/**/*.xml"

      - name: Set badge color
        shell: bash
        run: |
          case ${{ fromJSON( steps.test-results.outputs.json ).conclusion }} in
            success)
              echo "BADGE_COLOR=31c653" >> $GITHUB_ENV
              ;;
            failure)
              echo "BADGE_COLOR=800000" >> $GITHUB_ENV
              ;;
            neutral)
              echo "BADGE_COLOR=696969" >> $GITHUB_ENV
              ;;
          esac

      - name: Create badge
        uses: emibcn/badge-action@v2.0.3
        with:
          label: Tests
          status: '${{ fromJSON( steps.test-results.outputs.json ).formatted.stats.tests }} tests, ${{ fromJSON( steps.test-results.outputs.json ).formatted.stats.runs }} runs: ${{ fromJSON( steps.test-results.outputs.json ).conclusion }}'
          color: ${{ env.BADGE_COLOR }}
          path: badge.svg

      - name: Upload badge to Gist
        # Upload only for master branch
        if: >
          github.event_name == 'workflow_run' && github.event.workflow_run.head_branch == 'master' ||
          github.event_name != 'workflow_run' && github.ref == 'refs/heads/master'
        uses: andymckay/append-gist-action@0.2
        with:
          token: ${{ secrets.GIST_TOKEN }}
          gistURL: https://gist.githubusercontent.com/silver-popov/5e83ddfb2531206b60b6451851c51b2a
          file: badge.svg
